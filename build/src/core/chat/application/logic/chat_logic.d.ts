import { IChatRepository } from "../contract/data_access/chat_repository";
import { IMessageRepository } from "../contract/data_access/message_repository";
import ChatResponse from "../../../../core/chat/domain/dto/responses/chat_response";
import { IChatLogic } from "../contract/logic/chat_logic";
import { InitiateChat, TextMessageChatRequest, VoiceChatRequest } from "../../../../core/chat/domain/dto/requests/initiate_chat";
import IEventTracer from "../../../../core/shared/application/contract/observability/event_tracer";
import ICacheService from "../../../../core/shared/application/contract/data_access/cache/cache_service";
import { ICelebrityLogic } from "../../../../core/raging_fan/application/contract/logic/celebrity_logic";
import { IAuthLogic } from "../../../../core/auth/application/contract/logic/auth_logic";
import { IConversationAI } from "../../../../core/ai/application/contract/services/conversation_ai_service";
import { Message } from "../../../../core/chat/domain/entity/message";
import User from "../../../../core/auth/domain/entity/user";
import { CelebrityResponse } from "../../../../core/raging_fan/domain/dto/responses/celebrity";
import { INewsService } from "../../../../core/raging_fan/application/contract/services/news_service";
export default class ChatLogic implements IChatLogic {
    private readonly chatRepository;
    private readonly messageRepository;
    private readonly celebrityLogic;
    private readonly authLogic;
    private readonly conversationAI;
    private readonly newsService;
    private readonly eventTracer;
    private readonly cacheService;
    private readonly CacheChatDurationInSeconds;
    private readonly ChatCachePrefix;
    private readonly ChatCacheInstructionPrefix;
    constructor(chatRepository: IChatRepository, messageRepository: IMessageRepository, celebrityLogic: ICelebrityLogic, authLogic: IAuthLogic, conversationAI: IConversationAI, newsService: INewsService, eventTracer: IEventTracer, cacheService: ICacheService);
    private saveChatRecentHistoryInCache;
    private getChatRecentHistoryInCache;
    private getChat;
    startChat: (initiateChat: InitiateChat) => Promise<ChatResponse>;
    getChatForMessage: (textMessageRequest: TextMessageChatRequest) => Promise<ChatResponse>;
    getChatForVoice: (voiceChatRequest: VoiceChatRequest) => Promise<ChatResponse>;
    private getLatestNewsForCelebrityMessage;
    buildInstructionQuery: (textMessageRequest: TextMessageChatRequest | VoiceChatRequest, celebrity: CelebrityResponse, user: User) => Promise<string>;
    private getCelebrityAndUserFromChatResponse;
    respondToTextMessage: (textMessageRequest: TextMessageChatRequest) => Promise<Message>;
    updateChatCacheAndDb: (chat: ChatResponse, celebrityResponse: Message, userMessage: Message) => Promise<void>;
    getVoiceCallInstructionForChat: (chat: VoiceChatRequest) => Promise<string>;
}
